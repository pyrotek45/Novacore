import([std])

buffer = ""
instructions = []
stack = []
buildword = false

word = []
dict = []
current = ""
wordmap = [name logic]:{new}

case = {
    times( 1 swap() ) 
}

stackadd = [input]: {
    a = last(input)
    input = pop(input)
    b = last(input)
    input = pop(input)
    a + b
}

stacksub = [input]: {
    a = last(input)
    input = pop(input)
    b = last(input)
    input = pop(input)
    b - a
}

stackmul = [input]: {
    a = last(input)
    input = pop(input)
    b = last(input)
    input = pop(input)
    a * b
}

compute = {
    [ins] -> for( b ins^ {
        current = return(b)
        if( buildword {
            case({
                word = push(word b)
                when( ischar(b) {
                    when( char(b) == ";" {
                        buildword = false
                        word = pop(word)
                        name = word(0)
                        word = remove(word 0)
                        dict = push(dict wordmap(str(name) word))
                        word = []
                        break
                    })
                })
            })
        } {
            case({
                when( isint(b) {
                    stack = push(stack int(b))
                    break
                })

                case({


                    when( ischar(b) {

                        # print top of stack
                        when( char(b) == "." {
                            println(last(stack))
                            stack = pop(stack)
                            break
                        })

                        # build word
                        when( char(b) == ":" {
                            buildword = true
                            break
                        })

                        # add top of stack, push result
                        when( char(b) == "+" {
                            result = stackadd(stack)
                            stack = pop(stack)
                            stack = pop(stack)
                            stack = push(stack result)
                            break
                        })

                        # sub top of stack, push result
                        when( char(b) == "-" {
                            result = stacksub(stack)
                            stack = pop(stack)
                            stack = pop(stack)
                            stack = push(stack result)
                            break
                        })

                        # mul top of stack, push result
                        when( char(b) == "*" {
                            result = stackmul(stack)
                            stack = pop(stack)
                            stack = pop(stack)
                            stack = push(stack result)
                            break
                        })

                        break
                    })
                })

                case({
                    when( b == "dup" {
                        top = last(stack)
                        stack = push(stack top)
                        break
                    })

                    when( b == "swap" {
                        a = last(stack)
                        stack = pop(stack)
                        b = last(stack)
                        stack = pop(stack)
                        stack = push(stack a)
                        stack = push(stack b)
                        break
                    })

                    when( b == "drop" {
                        stack = pop(stack)
                        break
                    })

                    when( b == "rot" {
                        a = last(stack)
                        stack = pop(stack)
                        b = last(stack)
                        stack = pop(stack)
                        c = last(stack)
                        stack = pop(stack)
                        stack = push(stack b)
                        stack = push(stack a)
                        stack = push(stack c)
                        break
                    })

                    for( w dict {
                        when( w.name == current {
                            compute(w.logic)
                        })
                    })
                })
            })
        })
    }) ;
}

main = {

    for( c str(input) {
        case({
            when( c == " " {
                instructions = push(instructions return(buffer)))
                buffer = ""
                break
            })
            buffer = push(buffer c)
        })
    })

    when(std::length(buffer) > 0 {
        instructions = push(instructions return(buffer)))
        buffer = ""
    })

    compute(instructions)
}

while({true} {
    print("ForthCore $ ")
    input = readln()
    when( input == "exit" {break})

    main()
    when( std::length(stack) > 0 {    
        print(" --> ")
        for( i stack {
            print(i + " ")
        })
        println("")
    })
    instructions = []
})  