import([std])

stack = []
buildword = false

word = []
dict = []
ifcondition = [1]
loopstack = [0]
doloops = []
docount = []

current = ""
worditem = [name logic]:{new}

case = {
    times( 1 swap() ) 
}

stackadd = [input]: {
    a = last(input)
    input = pop(input)
    b = last(input)
    input = pop(input)
    a + b
}

stacksub = [input]: {
    a = last(input)
    input = pop(input)
    b = last(input)
    input = pop(input)
    b - a
}

stackmul = [input]: {
    a = last(input)
    input = pop(input)
    b = last(input)
    input = pop(input)
    a * b
}

stackeq = [input]: {
    a = last(input)
    input = pop(input)
    b = last(input)
    input = pop(input)
    if( a == b {
        1
    } {
        0
    })
}

checkstack = [x command]: {
    if(std::length(stack) < x {
        println("ERROR: Not enough arguments for " + command)
        false
    }{
        true
    })
}

compute = {
    set(ins)
    for( b ins {
        current = return(b)
        if( last(ifcondition) == 1 {
            if( buildword {
                case({
                    word = push(word b)
                    when( b == ";" {
                        buildword = false
                        word = pop(word)
                        name = word(0)
                        word = remove(word 0)
                        dict = push(dict worditem(str(name) word))
                        word = []
                        break
                    })
                })
            } {
                when( last(loopstack) == 1 {
                    if( b == "loop" {

                    } {
                        doloops = push(doloops current)
                    })
                    
                })
                case({
                    when( isint(b) {
                        stack = push(stack int(b))
                        break
                    })
                    when( b == "loop" {
                        loopstack = pop(loopstack)
                        t = last(docount)
                        docount = pop(docount)
                        for(n range(1 , t - 1) {
                            compute(doloops)
                        })
                        doloops = []
                        
                        break
                    })

                    when( b == "do" {
                        when( checkstack(1 "do") {
                            count = last(stack)
                            stack = pop(stack)
                            docount = push(docount count)
                            loopstack = push(loopstack 1)
                            
                        })
                        break
                    })
                    # print top of stack
                    when( b == "." {
                        println(last(stack))
                        stack = pop(stack)
                        break
                    })

                    # build word
                    when( b == ":" {
                        buildword = true
                        break
                    })

                    # if branching
                    when( b == "if" {
                        if( last(stack) == 1 {
                            ifcondition = push(ifcondition 1)
                        } {
                            ifcondition = push(ifcondition 0)
                        })
                        stack = pop(stack)
                        break
                    })

                    when( b == "then" {
                        ifcondition = pop(ifcondition)
                        break
                    })

                    when( b == "else" {
                        test = last(ifcondition)
                        if( test == 1 {
                            ifcondition = pop(ifcondition)
                            ifcondition = push(ifcondition 0)
                        } {
                            ifcondition = pop(ifcondition)
                            ifcondition = push(ifcondition 1)
                        })
                        break
                    })

                    # add top of stack, push result
                    when( b == "+" {
                        result = stackadd(stack)
                        stack = pop(stack)
                        stack = pop(stack)
                        stack = push(stack result)
                        break
                    })

                    # sub top of stack, push result
                    when( b == "-" {
                        result = stacksub(stack)
                        stack = pop(stack)
                        stack = pop(stack)
                        stack = push(stack result)
                        break
                    })

                    # mul top of stack, push result
                    when( b == "*" {
                        result = stackmul(stack)
                        stack = pop(stack)
                        stack = pop(stack)
                        stack = push(stack result)
                        break
                    })

                    # mul top of stack, push result
                    when( b == "=" {
                        result = stackeq(stack)
                        stack = pop(stack)
                        stack = pop(stack)
                        stack = push(stack result)
                        break
                    })

                    when( b == "dup" {
                        when( checkstack(1 "dup") {
                            top = last(stack)
                            stack = push(stack top)
                        })
                        break
                    })

                    when( b == "swap" {
                        when( checkstack(2 "swap") {
                            a = last(stack)
                            stack = pop(stack)
                            b = last(stack)
                            stack = pop(stack)
                            stack = push(stack a)
                            stack = push(stack b)
                        })
                        break
                    })

                    when( b == "drop" {
                        when( checkstack(1 "drop") {
                            stack = pop(stack)
                        })
                        break
                    })

                    when( b == "rot" {
                        when( checkstack(3 "rot") {
                            a = last(stack)
                            stack = pop(stack)
                            b = last(stack)
                            stack = pop(stack)
                            c = last(stack)
                            stack = pop(stack)
                            stack = push(stack b)
                            stack = push(stack a)
                            stack = push(stack c)
                        })
                        break
                    })

                })

                for( w dict {
                    when( w.name == current {
                        loopstack = push(loopstack 0)
                        compute(w.logic)
                        loopstack = pop(loopstack)
                        break
                    })
                })
            })
        } {
            when( b == "then" {
                ifcondition = pop(ifcondition)
            })

            when( b == "else" {
                test = last(ifcondition)
                if( test == 1 {
                    ifcondition = pop(ifcondition)
                    ifcondition = push(ifcondition 0)
                } {
                    ifcondition = pop(ifcondition)
                    ifcondition = push(ifcondition 1)
                })
            })
        })
    }) 
}

parse = [input]: {
    buffer = ""
    instructions = []
    for( c str(input) {
        case({
            when( c == ' ' {
                instructions = push(instructions buffer))
                buffer = ""
                break
            })
            buffer = push(buffer c)
        })
    })
    when( std::length(buffer) > 0 {
        instructions = push(instructions buffer))
    })
    return(instructions)
}

while( {true} {
    print("ForthCore $ ")
    input = readln()
    when( input == "exit" {break})
    compute(parse(input))
    when( std::length(stack) > 0 {    
        print(" --> ")
        for( i stack {
            print(i + " ")
        })
        println("")
    })
    instructions = []
})  