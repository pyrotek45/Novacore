import([std])

stack = []
buildword = false

word = []
dict = []
current = ""
worditem = [name logic]:{new}

case = {
    times( 1 swap() ) 
}

stackadd = [input]: {
    a = last(input)
    input = pop(input)
    b = last(input)
    input = pop(input)
    a + b
}

stacksub = [input]: {
    a = last(input)
    input = pop(input)
    b = last(input)
    input = pop(input)
    b - a
}

stackmul = [input]: {
    a = last(input)
    input = pop(input)
    b = last(input)
    input = pop(input)
    a * b
}

compute = {
    for( b swap() {
        current = return(b)
        if( buildword {
            case({
                word = push(word b)
                when( b == ";" {
                    buildword = false
                    word = pop(word)
                    name = word(0)
                    word = remove(word 0)
                    dict = push(dict worditem(str(name) word))
                    word = []
                    break
                })
            })
        } {
            case({
                when( isint(b) {
                    stack = push(stack int(b))
                    break
                })

                # print top of stack
                when( b == "." {
                    println(last(stack))
                    stack = pop(stack)
                    break
                })

                # build word
                when( b == ":" {
                    buildword = true
                    break
                })

                # add top of stack, push result
                when( b == "+" {
                    result = stackadd(stack)
                    stack = pop(stack)
                    stack = pop(stack)
                    stack = push(stack result)
                    break
                })

                # sub top of stack, push result
                when( b == "-" {
                    result = stacksub(stack)
                    stack = pop(stack)
                    stack = pop(stack)
                    stack = push(stack result)
                    break
                })

                # mul top of stack, push result
                when( b == "*" {
                    result = stackmul(stack)
                    stack = pop(stack)
                    stack = pop(stack)
                    stack = push(stack result)
                    break
                })

                when( b == "dup" {
                    top = last(stack)
                    stack = push(stack top)
                    break
                })

                when( b == "swap" {
                    a = last(stack)
                    stack = pop(stack)
                    b = last(stack)
                    stack = pop(stack)
                    stack = push(stack a)
                    stack = push(stack b)
                    break
                })

                when( b == "drop" {
                    stack = pop(stack)
                    break
                })

                when( b == "rot" {
                    a = last(stack)
                    stack = pop(stack)
                    b = last(stack)
                    stack = pop(stack)
                    c = last(stack)
                    stack = pop(stack)
                    stack = push(stack b)
                    stack = push(stack a)
                    stack = push(stack c)
                    break
                })

                for( w dict {
                    when( w.name == current {
                        compute(w.logic)
                    })
                })
            })
        })
    }) 
}

parse = [input]: {
    buffer = ""
    instructions = []
    for( c str(input) {
        case({
            when( c == ' ' {
                instructions = push(instructions buffer))
                buffer = ""
                break
            })
            buffer = push(buffer c)
        })
    })
    when(std::length(buffer) > 0 {
        instructions = push(instructions buffer))
        buffer = ""
    })
    return(instructions)
}

while({true} {
    print("ForthCore $ ")
    input = readln()
    when( input == "exit" {break})
    compute(parse(input))
    when( std::length(stack) > 0 {    
        print(" --> ")
        for( i stack {
            print(i + " ")
        })
        println("")
    })
    instructions = []
})  